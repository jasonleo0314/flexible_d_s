use crate::*;

#[test]
fn normal1() {
    let discernment = set! {1, 2, 3, 4};
    let fact_set_list = set_list![{1}, {2}, {3}, {1, 2}, {1, 3, 4}];
    let evidence_matrix = mat![
        [0.1, 0.0, 0.3, 0.4, 0.2],
        [0.05, 0.4, 0.4, 0.15, 0.0],
        [0.01, 0.19, 0.2, 0.3, 0.3],
        [0.0, 0.9, 0.0, 0.0, 0.1]
    ];
    test_template(
        discernment,
        fact_set_list,
        evidence_matrix,
        vec![0.073901, 0.83956386, 0.08653513, 0.0, 0.0],
    )
}

#[test]
fn normal2() {
    let dcm: HashSet<usize> = set! {1, 2,3};
    let sl: Vec<HashSet<usize>> = set_list![{1}, {2},{3},{1,2},{2,3},{1,3}];
    let m: Vec<Vec<f64>> = mat![
        [0.5, 0.0, 0.0, 0.3, 0.2, 0.0],
        [0.8, 0.0, 0.0, 0.0, 0.1, 0.1],
        [0.6, 0.2, 0.0, 0.0, 0.0, 0.2],
        [0.7, 0.1, 0.0, 0.0, 0.0, 0.2],
        [0.8, 0.1, 0.0, 0.0, 0.1, 0.0]
    ];
    test_template(
        dcm,
        sl,
        m,
        vec![0.9991327, 0.00048183, 0.00038547, 0.0, 0.0, 0.0],
    )
}
#[test]
fn normal3() {
    let dcm: HashSet<usize> = set! {1,2,3};
    let sl: Vec<HashSet<usize>> = set_list![{ 1 }, { 2 },{ 3 },{ 1,2,3}];
    let m: Vec<Vec<f64>> = mat![[0.98, 0.01, 0.0, 0.01], [0.0, 0.01, 0.98, 0.01]];
    test_template(dcm, sl, m, vec![0.49, 0.015, 0.49, 0.005])
}
#[test]
fn normal4() {
    let dcm: HashSet<usize> = set! {5, 55, 555, 5555};
    let sl: Vec<HashSet<usize>> = set_list![{5}, {55}, {555}, {5, 55}, {5, 55, 555, 5555}];
    let m: Vec<Vec<f64>> = mat![
        [0.1, 0.0, 0.3, 0.6, 0.0],
        [0.2, 0.4, 0.4, 0.0, 0.0],
        [0.7, 0.1, 0.2, 0.0, 0.0],
        [0.0, 0.0, 0.0, 0.0, 1.0]
    ];
    test_template(
        dcm,
        sl,
        m,
        vec![0.67123288, 0.16438356, 0.16438356, 0.0, 0.0],
    )
}
#[test]
fn normal5() {
    let dcm: HashSet<usize> = set! {1,2,3};
    let sl: Vec<HashSet<usize>> = set_list![{ 1 }, { 2 },{ 3 },{ 1 , 2 } , { 1,2,3}];
    let m: Vec<Vec<f64>> = mat![[0.4, 0.3, 0.1, 0.1, 0.1], [0.2, 0.2, 0.05, 0.5, 0.05]];
    test_template(
        dcm,
        sl,
        m,
        vec![0.46575342, 0.3630137, 0.02054795, 0.14383562, 0.00684932],
    )
}
#[test]
fn normal6() {
    let dcm: HashSet<usize> = set! {0, 1, 2};
    let sl: Vec<HashSet<usize>> = set_list![{ 0 }, { 1 }, { 2 }];
    let m: Vec<Vec<f64>> = mat![[0.999, 0.001, 0.0], [0.0, 0.001, 0.999]];
    test_template(dcm, sl, m, vec![0.4995, 0.001, 0.4995])
}

use std::time::Instant;
#[test]
fn bench_test() {
    // let dcm: HashSet<usize> = set! {5, 55, 555, 5555};
    // let sl: Vec<HashSet<usize>> = set_list![{5}, {55}, {555}, {5, 55}, {5, 55, 555, 5555}];
    // let m: Vec<Vec<f64>> = mat![
    //     [0.1, 0.0, 0.3, 0.6, 0.0],
    //     [0.2, 0.4, 0.4, 0.0, 0.0],
    //     [0.7, 0.1, 0.2, 0.0, 0.0],
    //     [0.1, 0.0, 0.3, 0.6, 0.0],
    //     [0.0, 0.0, 0.0, 0.0, 1.0]
    // ];
    // let a = Instant::now();
    // test_template(dcm, sl, m, vec![0.4995, 0.001, 0.4995]);
    // // println!("{:?}", a.elapsed());
    // let dcm: HashSet<usize> = set! {1, 2, 3, 4, 5};
    // let sl: Vec<HashSet<usize>> = set_list![{ 1 }, { 2 },{ 3 }, { 4 }, { 5 },{ 4,5 }, { 2,3,5 },
    //     { 1,3 }, { 1,2,3 }, { 2,5 ,1}, { 1,4 }, { 1,2,3,4 }, { 1,5 }];
    let dcm: HashSet<usize> = set! {1, 2, 3, 4, 5,6,7,8,9,10,11,12,13};
    let sl: Vec<HashSet<usize>> = set_list![
        { 1,7 },
        { 2,3,4,5,6,7,8,9 },
        { 3,1 },
        { 4,5,7,9,11,13 },
        { 5,6,7,8,11,12 },
        { 6,11,12,13 },
        { 7 },
        { 8,11,13 },
        { 9,11 },
        { 10 },
        { 11,12,13 },
        { 12,13 },
        { 13 }
    ];
    let m: Vec<Vec<f64>> = mat![
        [
            0.06510659, 0.06573851, 0.12665746, 0.05021125, 0.07782061, 0.10464535, 0.0660793,
            0.06741212, 0.0840469, 0.09755791, 0.10243446, 0.03683799, 0.05545155
        ],
        [
            0.13501804, 0.12185775, 0.1168829, 0.09882403, 0.03588922, 0.07736293, 0.09352667,
            0.0262496, 0.00558852, 0.10013514, 0.00898109, 0.0865463, 0.09313781
        ],
        // [
        //     0.02934601, 0.08821653, 0.19303869, 0.05867143, 0.03068344, 0.02407283, 0.11110469,
        //     0.12582071, 0.06858059, 0.12294115, 0.04603515, 0.03952192, 0.06196686
        // ],
        // [
        //     0.12235519, 0.13091149, 0.05545477, 0.14482497, 0.07009327, 0.12112511, 0.02243756,
        //     0.02003462, 0.02035168, 0.03666706, 0.08515579, 0.05082101, 0.11976748
        // ],
        // [
        //     0.13768582, 0.11776836, 0.03672264, 0.00220011, 0.03579828, 0.00213265, 0.0267763,
        //     0.14137695, 0.17298062, 0.03204264, 0.14888029, 0.14527486, 0.00036048
        // ],
        // [
        //     0.12467423, 0.08727341, 0.00746833, 0.144021, 0.07283735, 0.10331052, 0.07228151,
        //     0.07047047, 0.1, 0.10535049, 0.0, 0.02501269, 0.0873
        // ],
        // [
        //     0.07899021, 0.09288628, 0.01287085, 0.04177601, 0.1188582, 0.0, 0.1218533, 0.09945631,
        //     0.07983702, 0.01481047, 0.1155513, 0.13, 0.09311
        // ],
        // [
        //     0.05710916, 0.10048078, 0.03694499, 0.15144632, 0.09042658, 0.08097990, 0.04592522,
        //     0.03702343, 0.07381645, 0.14620439, 0.02515228, 0.07567938, 0.07881108
        // ]
    ];
    let a = Instant::now();
    test_template(dcm, sl, m, vec![0.4995, 0.001, 0.4995]);
    println!("{:?}", a.elapsed());
}

fn test_template(
    discernment: HashSet<usize>,
    fact_set_list: Vec<HashSet<usize>>,
    evidence_matrix: Vec<Vec<f64>>,
    _assert_vec: Vec<f64>,
) {
    let idt = InputData {
        discernment,
        fact_set_list,
        evidence_matrix,
    };
    let evd_wrapped = idt.build_evidence(true);
    match evd_wrapped {
        None => {
            println!("输入不合法");
        }
        Some(evd) => {
            //调用evd开展运算
            //以下内容为占位符
            let rst = run_flexible_complete_conflict_algo(&evd);
            println!("{:?}", rst);
            // assert_eq!(assert_vec, rst);
        }
    };
}
